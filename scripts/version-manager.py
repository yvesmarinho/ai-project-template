#!/usr/bin/env python3
"""
Sistema de Versionamento Autom√°tico - AI Project Template
Implementa padr√£o filename-vnnn.* para versionamento autom√°tico de arquivos
Inspirado em enterprise-project-model patterns
"""

import os
import shutil
import re
import json
import datetime
from pathlib import Path
from typing import List, Dict, Optional, Tuple
from dataclasses import dataclass, asdict
import argparse


@dataclass
class VersionInfo:
    """Informa√ß√µes de vers√£o de um arquivo."""
    original_file: str
    current_version: int
    versions: List[str]
    last_modified: str
    backup_dir: str


class VersionManager:
    """Gerenciador de versionamento autom√°tico."""
    
    def __init__(self, base_dir: str = ".", backup_dir: str = ".versions"):
        """Inicializar o gerenciador de vers√µes.
        
        Args:
            base_dir: Diret√≥rio base para versionamento
            backup_dir: Diret√≥rio para armazenar backups
        """
        self.base_dir = Path(base_dir)
        self.backup_dir = Path(backup_dir)
        self.version_db_file = self.backup_dir / "version-index.json"
        
        # Criar diret√≥rio de backup se n√£o existir
        self.backup_dir.mkdir(exist_ok=True)
        
        # Carregar ou inicializar database de vers√µes
        self.version_db = self._load_version_db()
    
    def _load_version_db(self) -> Dict[str, VersionInfo]:
        """Carregar database de vers√µes."""
        if self.version_db_file.exists():
            try:
                with open(self.version_db_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return {
                        k: VersionInfo(**v) for k, v in data.items()
                    }
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro ao carregar version database: {e}")
        
        return {}
    
    def _save_version_db(self):
        """Salvar database de vers√µes."""
        try:
            data = {k: asdict(v) for k, v in self.version_db.items()}
            with open(self.version_db_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ùå Erro ao salvar version database: {e}")
    
    def _get_version_pattern(self, filename: str) -> str:
        """Gerar padr√£o de vers√£o para um arquivo.
        
        Args:
            filename: Nome do arquivo original
            
        Returns:
            Padr√£o regex para vers√µes do arquivo
        """
        name, ext = os.path.splitext(filename)
        # Escapar caracteres especiais do regex
        escaped_name = re.escape(name)
        escaped_ext = re.escape(ext)
        return f"{escaped_name}-v(\\d+){escaped_ext}"
    
    def _find_existing_versions(self, filename: str) -> List[Tuple[int, str]]:
        """Encontrar vers√µes existentes de um arquivo.
        
        Args:
            filename: Nome do arquivo original
            
        Returns:
            Lista de tuplas (vers√£o, caminho_arquivo)
        """
        pattern = self._get_version_pattern(filename)
        versions = []
        
        # Buscar no diret√≥rio de backup
        for file_path in self.backup_dir.glob("*"):
            if file_path.is_file():
                match = re.match(pattern, file_path.name)
                if match:
                    version_num = int(match.group(1))
                    versions.append((version_num, str(file_path)))
        
        return sorted(versions, key=lambda x: x[0])
    
    def _get_next_version(self, filename: str) -> int:
        """Obter pr√≥ximo n√∫mero de vers√£o para um arquivo.
        
        Args:
            filename: Nome do arquivo original
            
        Returns:
            Pr√≥ximo n√∫mero de vers√£o
        """
        existing_versions = self._find_existing_versions(filename)
        if not existing_versions:
            return 1
        
        highest_version = max(existing_versions, key=lambda x: x[0])[0]
        return highest_version + 1
    
    def create_backup(self, file_path: str) -> Optional[str]:
        """Criar backup versionado de um arquivo.
        
        Args:
            file_path: Caminho do arquivo para backup
            
        Returns:
            Caminho do arquivo de backup criado ou None se erro
        """
        source_path = Path(file_path)
        
        if not source_path.exists():
            print(f"‚ùå Arquivo n√£o encontrado: {file_path}")
            return None
        
        filename = source_path.name
        next_version = self._get_next_version(filename)
        
        # Gerar nome do backup
        name, ext = os.path.splitext(filename)
        backup_name = f"{name}-v{next_version:03d}{ext}"
        backup_path = self.backup_dir / backup_name
        
        try:
            # Criar backup
            shutil.copy2(source_path, backup_path)
            
            # Atualizar database
            relative_path = str(source_path.relative_to(self.base_dir))
            
            if relative_path in self.version_db:
                version_info = self.version_db[relative_path]
                version_info.current_version = next_version
                version_info.versions.append(str(backup_path))
                version_info.last_modified = datetime.datetime.now().isoformat()
            else:
                version_info = VersionInfo(
                    original_file=relative_path,
                    current_version=next_version,
                    versions=[str(backup_path)],
                    last_modified=datetime.datetime.now().isoformat(),
                    backup_dir=str(self.backup_dir)
                )
                self.version_db[relative_path] = version_info
            
            self._save_version_db()
            
            print(f"‚úÖ Backup criado: {backup_name}")
            return str(backup_path)
            
        except Exception as e:
            print(f"‚ùå Erro ao criar backup: {e}")
            return None
    
    def restore_version(self, file_path: str, version: int) -> bool:
        """Restaurar uma vers√£o espec√≠fica de um arquivo.
        
        Args:
            file_path: Caminho do arquivo original
            version: N√∫mero da vers√£o para restaurar
            
        Returns:
            True se sucesso, False caso contr√°rio
        """
        source_path = Path(file_path)
        relative_path = str(source_path.relative_to(self.base_dir))
        
        if relative_path not in self.version_db:
            print(f"‚ùå Arquivo n√£o encontrado no version database: {file_path}")
            return False
        
        version_info = self.version_db[relative_path]
        
        # Encontrar backup da vers√£o solicitada
        filename = source_path.name
        name, ext = os.path.splitext(filename)
        backup_name = f"{name}-v{version:03d}{ext}"
        backup_path = self.backup_dir / backup_name
        
        if not backup_path.exists():
            print(f"‚ùå Vers√£o {version} n√£o encontrada: {backup_name}")
            return False
        
        try:
            # Criar backup do arquivo atual antes de restaurar
            if source_path.exists():
                self.create_backup(str(source_path))
            
            # Restaurar vers√£o
            shutil.copy2(backup_path, source_path)
            
            print(f"‚úÖ Vers√£o {version} restaurada: {file_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao restaurar vers√£o: {e}")
            return False
    
    def list_versions(self, file_path: Optional[str] = None) -> Dict[str, VersionInfo]:
        """Listar vers√µes dispon√≠veis.
        
        Args:
            file_path: Caminho espec√≠fico (opcional, se None lista todos)
            
        Returns:
            Dicion√°rio com informa√ß√µes de vers√£o
        """
        if file_path:
            source_path = Path(file_path)
            relative_path = str(source_path.relative_to(self.base_dir))
            
            if relative_path in self.version_db:
                return {relative_path: self.version_db[relative_path]}
            else:
                return {}
        
        return self.version_db.copy()
    
    def cleanup_old_versions(self, file_path: str, keep_versions: int = 5) -> int:
        """Limpar vers√µes antigas, mantendo apenas as mais recentes.
        
        Args:
            file_path: Caminho do arquivo
            keep_versions: N√∫mero de vers√µes para manter
            
        Returns:
            N√∫mero de vers√µes removidas
        """
        source_path = Path(file_path)
        relative_path = str(source_path.relative_to(self.base_dir))
        
        if relative_path not in self.version_db:
            return 0
        
        version_info = self.version_db[relative_path]
        versions = version_info.versions.copy()
        
        if len(versions) <= keep_versions:
            return 0
        
        # Ordenar vers√µes (mais antigas primeiro)
        versions.sort(key=lambda x: int(re.search(r'-v(\d+)', Path(x).name).group(1)))
        
        # Remover vers√µes antigas
        removed_count = 0
        versions_to_remove = versions[:-keep_versions]
        
        for version_path in versions_to_remove:
            try:
                Path(version_path).unlink()
                version_info.versions.remove(version_path)
                removed_count += 1
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro ao remover vers√£o {version_path}: {e}")
        
        if removed_count > 0:
            self._save_version_db()
            print(f"üßπ Removidas {removed_count} vers√µes antigas de {file_path}")
        
        return removed_count
    
    def get_file_history(self, file_path: str) -> List[Dict]:
        """Obter hist√≥rico completo de um arquivo.
        
        Args:
            file_path: Caminho do arquivo
            
        Returns:
            Lista com hist√≥rico de vers√µes
        """
        source_path = Path(file_path)
        relative_path = str(source_path.relative_to(self.base_dir))
        
        if relative_path not in self.version_db:
            return []
        
        version_info = self.version_db[relative_path]
        history = []
        
        for version_path in version_info.versions:
            try:
                backup_path = Path(version_path)
                if backup_path.exists():
                    stat = backup_path.stat()
                    
                    # Extrair n√∫mero da vers√£o do nome
                    match = re.search(r'-v(\d+)', backup_path.name)
                    version_num = int(match.group(1)) if match else 0
                    
                    history.append({
                        'version': version_num,
                        'path': str(backup_path),
                        'size': stat.st_size,
                        'modified': datetime.datetime.fromtimestamp(stat.st_mtime).isoformat(),
                        'exists': True
                    })
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro ao processar vers√£o {version_path}: {e}")
        
        # Ordenar por vers√£o (mais recente primeiro)
        history.sort(key=lambda x: x['version'], reverse=True)
        return history


def main():
    """Fun√ß√£o principal do script."""
    parser = argparse.ArgumentParser(
        description="Sistema de Versionamento Autom√°tico - AI Project Template"
    )
    
    parser.add_argument('command', choices=['backup', 'restore', 'list', 'cleanup', 'history'],
                      help='Comando a executar')
    
    parser.add_argument('file', nargs='?', help='Arquivo para processar')
    
    parser.add_argument('--version', '-v', type=int, 
                      help='N√∫mero da vers√£o (para restore)')
    
    parser.add_argument('--keep', '-k', type=int, default=5,
                      help='N√∫mero de vers√µes para manter (cleanup)')
    
    parser.add_argument('--backup-dir', '-b', default='.versions',
                      help='Diret√≥rio para backups')
    
    parser.add_argument('--base-dir', '-d', default='.',
                      help='Diret√≥rio base')
    
    args = parser.parse_args()
    
    # Inicializar gerenciador
    vm = VersionManager(base_dir=args.base_dir, backup_dir=args.backup_dir)
    
    if args.command == 'backup':
        if not args.file:
            print("‚ùå Arquivo necess√°rio para backup")
            return 1
        
        backup_path = vm.create_backup(args.file)
        if backup_path:
            print(f"üì¶ Backup criado com sucesso: {backup_path}")
            return 0
        else:
            return 1
    
    elif args.command == 'restore':
        if not args.file or args.version is None:
            print("‚ùå Arquivo e vers√£o necess√°rios para restore")
            return 1
        
        if vm.restore_version(args.file, args.version):
            return 0
        else:
            return 1
    
    elif args.command == 'list':
        versions = vm.list_versions(args.file)
        
        if not versions:
            print("üìã Nenhuma vers√£o encontrada")
            return 0
        
        print("üìã Vers√µes dispon√≠veis:")
        print()
        
        for file_path, version_info in versions.items():
            print(f"üìÑ {file_path}")
            print(f"   Vers√£o atual: v{version_info.current_version:03d}")
            print(f"   √öltima modifica√ß√£o: {version_info.last_modified}")
            print(f"   Vers√µes: {len(version_info.versions)}")
            print()
    
    elif args.command == 'cleanup':
        if not args.file:
            print("‚ùå Arquivo necess√°rio para cleanup")
            return 1
        
        removed = vm.cleanup_old_versions(args.file, args.keep)
        print(f"üßπ Cleanup conclu√≠do. Vers√µes removidas: {removed}")
        return 0
    
    elif args.command == 'history':
        if not args.file:
            print("‚ùå Arquivo necess√°rio para history")
            return 1
        
        history = vm.get_file_history(args.file)
        
        if not history:
            print("üìã Nenhum hist√≥rico encontrado")
            return 0
        
        print(f"üìã Hist√≥rico de {args.file}:")
        print()
        
        for entry in history:
            print(f"v{entry['version']:03d} - {entry['modified']}")
            print(f"     Tamanho: {entry['size']} bytes")
            print(f"     Caminho: {entry['path']}")
            print()
    
    return 0


if __name__ == "__main__":
    exit(main())